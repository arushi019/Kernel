diff -Nur ./Desktop/linux-3.13/arch/x86/syscalls/syscall_64.tbl /usr/src/linux-3.13/arch/x86/syscalls/syscall_64.tbl
--- ./Desktop/linux-3.13/arch/x86/syscalls/syscall_64.tbl	2014-01-20 08:10:07.000000000 +0530
+++ /usr/src/linux-3.13/arch/x86/syscalls/syscall_64.tbl	2018-02-11 13:30:51.652705000 +0530
@@ -320,6 +320,7 @@
 311	64	process_vm_writev	sys_process_vm_writev
 312	common	kcmp			sys_kcmp
 313	common	finit_module		sys_finit_module
+314	common	sh_task_info		sys_sh_task_info
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -Nur ./Desktop/linux-3.13/include/linux/syscalls.h /usr/src/linux-3.13/include/linux/syscalls.h
--- ./Desktop/linux-3.13/include/linux/syscalls.h	2014-01-20 08:10:07.000000000 +0530
+++ /usr/src/linux-3.13/include/linux/syscalls.h	2018-02-11 13:36:00.390259001 +0530
@@ -847,4 +847,5 @@
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_sh_task_info(long pid,char *filename);
 #endif
diff -Nur ./Desktop/linux-3.13/Makefile /usr/src/linux-3.13/Makefile
--- ./Desktop/linux-3.13/Makefile	2014-01-20 08:10:07.000000000 +0530
+++ /usr/src/linux-3.13/Makefile	2018-02-11 13:29:41.519788998 +0530
@@ -754,7 +754,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -Nur ./Desktop/linux-3.13/security/tomoyo/builtin-policy.h /usr/src/linux-3.13/security/tomoyo/builtin-policy.h
--- ./Desktop/linux-3.13/security/tomoyo/builtin-policy.h	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13/security/tomoyo/builtin-policy.h	2018-02-11 12:21:31.990234496 +0530
@@ -0,0 +1,12 @@
+static char tomoyo_builtin_profile[] __initdata =
+"";
+static char tomoyo_builtin_exception_policy[] __initdata =
+"initialize_domain /sbin/modprobe from any\n"
+"initialize_domain /sbin/hotplug from any\n"
+"";
+static char tomoyo_builtin_domain_policy[] __initdata =
+"";
+static char tomoyo_builtin_manager[] __initdata =
+"";
+static char tomoyo_builtin_stat[] __initdata =
+"";
diff -Nur ./Desktop/linux-3.13/security/tomoyo/policy/exception_policy.conf /usr/src/linux-3.13/security/tomoyo/policy/exception_policy.conf
--- ./Desktop/linux-3.13/security/tomoyo/policy/exception_policy.conf	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13/security/tomoyo/policy/exception_policy.conf	2018-02-11 12:21:08.350234496 +0530
@@ -0,0 +1,2 @@
+initialize_domain /sbin/modprobe from any
+initialize_domain /sbin/hotplug from any
diff -Nur ./Desktop/linux-3.13/sh_task_info/file /usr/src/linux-3.13/sh_task_info/file
--- ./Desktop/linux-3.13/sh_task_info/file	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13/sh_task_info/file	2018-02-11 20:38:11.738827001 +0530
@@ -0,0 +1,11 @@
+Process: init
+PID: 1
+Process State: 1
+Priority: 120
+RT_Priority: 0
+Static Priority: 120
+Normal Priority: 120
+
+Parent Process: swapper/0
+PID Number: 0
+
diff -Nur ./Desktop/linux-3.13/sh_task_info/Makefile /usr/src/linux-3.13/sh_task_info/Makefile
--- ./Desktop/linux-3.13/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13/sh_task_info/Makefile	2018-02-11 13:29:10.099506999 +0530
@@ -0,0 +1 @@
+obj-y := sh_task_info.o
diff -Nur ./Desktop/linux-3.13/sh_task_info/sh_task_info.c /usr/src/linux-3.13/sh_task_info/sh_task_info.c
--- ./Desktop/linux-3.13/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13/sh_task_info/sh_task_info.c	2018-02-11 20:28:38.082590000 +0530
@@ -0,0 +1,87 @@
+#include<linux/kernel.h>
+#include<linux/init.h>
+#include<linux/sched.h>
+#include<linux/syscalls.h>
+#include<linux/module.h>
+#include<linux/file.h>
+#include<linux/fs.h>
+#include<linux/fcntl.h>
+#include<asm/errno.h> 
+
+asmlinkage long sys_sh_task_info(long pid,char* filename)
+{
+	struct task_struct *cur_task;
+	if(pid<0 || pid>4194304)
+		return EINVAL;
+    	int flag=0;
+    	for_each_process(cur_task)
+	{
+        	long temp=(long)task_pid_nr(cur_task);
+        	if (pid==temp)
+		{
+			flag=1;
+		//printk("Process: %s\nID Number: %ld\nProcess State: %ld\nPriority: %ld\nRT_Priority: %ld\nStatic Priority: %ld\nNormal Priority: %ld\n",cur_task->comm,(long)task_pid_nr(cur_task),(long)cur_task->state,(long)cur_task->prio,(long)cur_task->rt_priority,(long)cur_task->static_prio,(long)cur_task->normal_prio);
+
+		struct file *files;
+		char data[5000];
+		char data2[5000];
+		int flag2=0;
+		if(cur_task->parent)
+			flag2=1;
+		if(flag2==0)
+		{
+			sprintf(data,"Process: %s\nPID: %ld\nProcess State: %ld\nPriority: %ld\nRT_Priority: %ld\nStatic Priority: %ld\nNormal Priority: %ld\n",cur_task->comm,(long)task_pid_nr(cur_task),(long)cur_task->state,(long)cur_task->prio,(long)cur_task->rt_priority,(long)cur_task->static_prio,(long)cur_task->normal_prio);
+		}
+		else
+		{
+			sprintf(data,"Process: %s\nPID: %ld\nProcess State: %ld\nPriority: %ld\nRT_Priority: %ld\nStatic Priority: %ld\nNormal Priority: %ld\n\nParent Process: %s\nPID Number: %ld\n\n",cur_task->comm,(long)task_pid_nr(cur_task),(long)cur_task->state,(long)cur_task->prio,(long)cur_task->rt_priority,(long)cur_task->static_prio,(long)cur_task->normal_prio,cur_task->parent->comm,(long)task_pid_nr(cur_task->parent));
+		}
+		int fd;
+		loff_t posn=0;
+		mm_segment_t old_fs = get_fs();
+		set_fs(KERNEL_DS);
+		fd=sys_open(filename, O_WRONLY|O_CREAT, 0644);
+		
+		if(fd >=0)
+		{
+			sys_write(fd,data,strlen(data));
+			files=fget(fd);
+			if(files)
+			{
+				vfs_write(files,data,strlen(data),&posn);
+				fput(files);
+			}
+			sys_close(fd);
+			
+			if(flag2==0)
+		{
+			sprintf(data2,"System Call sh_task_info returned 0\n\nProcess: %s\nPID: %ld\nProcess State: %ld\nPriority: %ld\nRT_Priority: %ld\nStatic Priority: %ld\nNormal Priority: %ld\n",cur_task->comm,(long)task_pid_nr(cur_task),(long)cur_task->state,(long)cur_task->prio,(long)cur_task->rt_priority,(long)cur_task->static_prio,(long)cur_task->normal_prio);
+		}
+		else
+		{
+			sprintf(data2,"System Call sh_task_info returned 0\n\nProcess: %s\nPID: %ld\nProcess State: %ld\nPriority: %ld\nRT_Priority: %ld\nStatic Priority: %ld\nNormal Priority: %ld\n\nParent Process: %s\nPID Number: %ld\n\n",cur_task->comm,(long)task_pid_nr(cur_task),(long)cur_task->state,(long)cur_task->prio,(long)cur_task->rt_priority,(long)cur_task->static_prio,(long)cur_task->normal_prio,cur_task->parent->comm,(long)task_pid_nr(cur_task->parent));
+		}
+			fd=1;
+			sys_write(fd,data2,strlen(data2));
+			/*files=fget(fd);
+			if(files)
+			{
+				vfs_write(files,data,strlen(data),&posn);
+				fput(files);
+			}*/
+			sys_close(fd);
+			
+		}
+		else{
+		
+			return ENOENT;		
+		}
+		set_fs(old_fs);
+		break;
+	}
+
+    }
+	if(flag==0)
+		return ESRCH;
+    return 0;
+}
